// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: tss.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TssServiceClient is the client API for TssService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TssServiceClient interface {
	SignMessage(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*RVSignatureReply, error)
	RegisterDKG(ctx context.Context, in *DKGRequest, opts ...grpc.CallOption) (*DkgReply, error)
	Reshare(ctx context.Context, in *ReshareRequest, opts ...grpc.CallOption) (*ServiceReply, error)
}

type tssServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTssServiceClient(cc grpc.ClientConnInterface) TssServiceClient {
	return &tssServiceClient{cc}
}

func (c *tssServiceClient) SignMessage(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*RVSignatureReply, error) {
	out := new(RVSignatureReply)
	err := c.cc.Invoke(ctx, "/pb.TssService/SignMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServiceClient) RegisterDKG(ctx context.Context, in *DKGRequest, opts ...grpc.CallOption) (*DkgReply, error) {
	out := new(DkgReply)
	err := c.cc.Invoke(ctx, "/pb.TssService/RegisterDKG", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServiceClient) Reshare(ctx context.Context, in *ReshareRequest, opts ...grpc.CallOption) (*ServiceReply, error) {
	out := new(ServiceReply)
	err := c.cc.Invoke(ctx, "/pb.TssService/Reshare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TssServiceServer is the server API for TssService service.
// All implementations must embed UnimplementedTssServiceServer
// for forward compatibility
type TssServiceServer interface {
	SignMessage(context.Context, *SignRequest) (*RVSignatureReply, error)
	RegisterDKG(context.Context, *DKGRequest) (*DkgReply, error)
	Reshare(context.Context, *ReshareRequest) (*ServiceReply, error)
	mustEmbedUnimplementedTssServiceServer()
}

// UnimplementedTssServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTssServiceServer struct {
}

func (UnimplementedTssServiceServer) SignMessage(context.Context, *SignRequest) (*RVSignatureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignMessage not implemented")
}
func (UnimplementedTssServiceServer) RegisterDKG(context.Context, *DKGRequest) (*DkgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDKG not implemented")
}
func (UnimplementedTssServiceServer) Reshare(context.Context, *ReshareRequest) (*ServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reshare not implemented")
}
func (UnimplementedTssServiceServer) mustEmbedUnimplementedTssServiceServer() {}

// UnsafeTssServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TssServiceServer will
// result in compilation errors.
type UnsafeTssServiceServer interface {
	mustEmbedUnimplementedTssServiceServer()
}

func RegisterTssServiceServer(s grpc.ServiceRegistrar, srv TssServiceServer) {
	s.RegisterService(&TssService_ServiceDesc, srv)
}

func _TssService_SignMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServiceServer).SignMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TssService/SignMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServiceServer).SignMessage(ctx, req.(*SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssService_RegisterDKG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DKGRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServiceServer).RegisterDKG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TssService/RegisterDKG",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServiceServer).RegisterDKG(ctx, req.(*DKGRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssService_Reshare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReshareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServiceServer).Reshare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TssService/Reshare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServiceServer).Reshare(ctx, req.(*ReshareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TssService_ServiceDesc is the grpc.ServiceDesc for TssService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TssService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TssService",
	HandlerType: (*TssServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignMessage",
			Handler:    _TssService_SignMessage_Handler,
		},
		{
			MethodName: "RegisterDKG",
			Handler:    _TssService_RegisterDKG_Handler,
		},
		{
			MethodName: "Reshare",
			Handler:    _TssService_Reshare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tss.proto",
}
